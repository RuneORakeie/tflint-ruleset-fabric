package apispec

import (
	"fmt"

    "github.com/terraform-linters/tflint-plugin-sdk/tflint"
    "github.com/terraform-linters/tflint-plugin-sdk/helper"
    "github.com/terraform-linters/tflint-plugin-sdk/hclext"
)

type {{ .RuleNameCC }} struct{ tflint.DefaultRule }

func New{{ .RuleNameCC }}() *{{ .RuleNameCC }} { return &{{ .RuleNameCC }}{} }

func (r *{{ .RuleNameCC }}) Name() string                   { return "{{ .RuleName }}" }
func (r *{{ .RuleNameCC }}) Enabled() bool                  { return true }
func (r *{{ .RuleNameCC }}) Severity() tflint.Severity      { return tflint.ERROR }
func (r *{{ .RuleNameCC }}) Link() string                   { return "{{ .ReferenceURL }}" }

func (r *{{ .RuleNameCC }}) Check(runner tflint.Runner) error {
    content, err := runner.GetModuleContent(&hclext.BodySchema{
        Blocks: []hclext.BlockSchema{
            {
                Type:       "resource",
                LabelNames: []string{"type", "name"},
                Body: &hclext.BodySchema{
                    Attributes: []hclext.AttributeSchema{
                        {Name: "{{ .AttributeName }}"},
                    },
                },
            },
        },
    }, nil)
    if err != nil {
        return err
    }

    for _, block := range content.Blocks {
        if block.Labels[0] != "{{ .ResourceType }}" {
            continue
        }
        attr, ok := block.Body.Attributes["{{ .AttributeName }}"]
        if !ok {
            continue
        }

        var v string
        if err := runner.EvaluateExpr(attr.Expr, &v, nil); err != nil {
            continue
        }

		{{- if .SetMaxLength }}
				if len(v) > {{ .MaxLength }} {
					if err := runner.EmitIssue(r,
						fmt.Sprintf("%s exceeds max length %d", "{{ .AttributeName }}", {{ .MaxLength }}),
						attr.Expr.Range()); err != nil {
						return err
					}
				}
		{{- end }}

		{{- if .SetMinLength }}
				if len(v) < {{ .MinLength }} {
					if err := runner.EmitIssue(r,
						fmt.Sprintf("%s shorter than min length %d", "{{ .AttributeName }}", {{ .MinLength }}),
						attr.Expr.Range()); err != nil {
						return err
					}
				}
		{{- end }}
        // TODO: add pattern/enum checks if needed
    }

    return nil
}