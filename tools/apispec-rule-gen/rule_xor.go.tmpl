package apispec

import (
    "fmt"

    "github.com/terraform-linters/tflint-plugin-sdk/tflint"
    "github.com/terraform-linters/tflint-plugin-sdk/hclext"
)

type {{ .RuleNameCC }} struct{ tflint.DefaultRule }

func New{{ .RuleNameCC }}() *{{ .RuleNameCC }} { return &{{ .RuleNameCC }}{} }

func (r *{{ .RuleNameCC }}) Name() string              { return "{{ .RuleName }}" }
func (r *{{ .RuleNameCC }}) Enabled() bool             { return true }
func (r *{{ .RuleNameCC }}) Severity() tflint.Severity { return tflint.ERROR }
func (r *{{ .RuleNameCC }}) Link() string              { return "{{ .ReferenceURL }}" }

func (r *{{ .RuleNameCC }}) Check(runner tflint.Runner) error {
    content, err := runner.GetModuleContent(&hclext.BodySchema{
        Blocks: []hclext.BlockSchema{
            {
                Type:       "resource",
                LabelNames: []string{"type", "name"},
                Body: &hclext.BodySchema{
                    Attributes: []hclext.AttributeSchema{
                        {{- range (split .Pattern ",") }}{Name: "{{ . }}" },{{- end }}
                    },
                },
            },
        },
    }, nil)
    if err != nil {
        return err
    }

    for _, block := range content.Blocks {
        if block.Labels[0] != "{{ .ResourceType }}" {
            continue
        }
        count := 0
        for _, f := range []string{ {{- range (split .Pattern ",") }}"{{ . }}",{{- end }} } {
            if _, ok := block.Body.Attributes[f]; ok {
                count++
            }
        }

        if count != 1 {
            if err := runner.EmitIssue(r, fmt.Sprintf("Exactly one of %s must be set", "{{ .Pattern }}"), block.DefRange); err != nil {
                return err
            }
        }
    }

    return nil
}