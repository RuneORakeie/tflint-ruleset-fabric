package apispec

import (
	"github.com/terraform-linters/tflint-plugin-sdk/hclext"
	"github.com/terraform-linters/tflint-plugin-sdk/tflint"
)

// {{ .RuleNameCC }} checks whether {{ .ResourceType }}.{{ .BlockType }}.{{ .AttributeName }} is valid
type {{ .RuleNameCC }} struct {
	tflint.DefaultRule

	resourceType  string
	blockType     string
	attributeName string
{{ if .Enum }}	enum          []string{{ end }}
{{ if .Pattern }}	pattern       string{{ end }}
{{ if .Format }}	format        string{{ end }}
{{ if .SetMax }}	max           int{{ end }}
{{ if .SetMin }}	min           int{{ end }}
{{ if .ReadOnly }}	readOnly      bool{{ end }}
}

// NewFabricRule returns a new rule instance
func New{{ .RuleNameCC }}() *{{ .RuleNameCC }} {
	return &{{ .RuleNameCC }}{
		resourceType:  "{{ .ResourceType }}",
		blockType:     "{{ .BlockType }}",
		attributeName: "{{ .AttributeName }}",
{{ if .Enum }}		enum:          []string{ {{ range .Enum }}"{{ . }}", {{ end }} },{{ end }}
{{ if .Pattern }}		pattern:       `{{ .Pattern }}`,{{ end }}
{{ if .Format }}		format:        "{{ .Format }}",{{ end }}
{{ if .SetMax }}		max:           {{ .Max }},{{ end }}
{{ if .SetMin }}		min:           {{ .Min }},{{ end }}
{{ if .ReadOnly }}		readOnly:      {{ .ReadOnly }},{{ end }}
	}
}

// Name returns the rule name
func (r *{{ .RuleNameCC }}) Name() string {
	return "{{ .RuleName }}"
}

// Enabled returns whether the rule is enabled by default
func (r *{{ .RuleNameCC }}) Enabled() bool {
	return true
}

// Severity returns the rule severity
func (r *{{ .RuleNameCC }}) Severity() tflint.Severity {
	return tflint.ERROR
}

// Link returns the rule reference link
func (r *{{ .RuleNameCC }}) Link() string {
	return "{{ .ReferenceURL }}"
}

// Check validates the resource block
func (r *{{ .RuleNameCC }}) Check(runner tflint.Runner) error {
	resources, err := runner.GetResourceContent(r.resourceType, &hclext.BodySchema{
		Blocks: []hclext.BlockSchema{
			{
				Type: r.blockType,
				Body: &hclext.BodySchema{
					Attributes: []hclext.AttributeSchema{
						{Name: r.attributeName},
					},
				},
			},
		},
	}, nil)
	if err != nil {
		return err
	}

	for _, resource := range resources.Blocks {
		for _, block := range resource.Body.Blocks {
			if block.Type != r.blockType {
				continue
			}

			attribute, exists := block.Body.Attributes[r.attributeName]
			if !exists {
				continue
			}

{{ if .Sensitive }}			// Sensitive attribute - skip validation
			if r.isSensitive(attribute) {
				continue
			}
{{ end }}
			var val string
			err := runner.EvaluateExpr(attribute.Expr, &val, nil)
			if err != nil {
				return err
			}

{{ if .Enum }}			if err := r.validateEnum(runner, val, attribute); err != nil {
				return err
			}
{{ end }}
{{ if .Pattern }}			if err := r.validatePattern(runner, val, attribute); err != nil {
				return err
			}
{{ end }}
{{ if .Format }}			if err := r.validateFormat(runner, val, attribute); err != nil {
				return err
			}
{{ end }}
{{ if .ReadOnly }}			if r.readOnly {
				return runner.EmitIssue(
					r,
					"{{ .AttributeName }} is a read-only property and cannot be set",
					attribute.Expr.Range(),
				)
			}
{{ end }}
{{ if or .SetMax .SetMin }}			var numVal {{ if eq .SetMax true }}int{{ else }}float64{{ end }}
			if err := runner.EvaluateExpr(attribute.Expr, &numVal, nil); err == nil {
{{ if .SetMax }}				if numVal > r.max {
					return runner.EmitIssue(
						r,
						fmt.Sprintf("{{ .AttributeName }} must be at most %d", r.max),
						attribute.Expr.Range(),
					)
				}
{{ end }}
{{ if .SetMin }}				if numVal < r.min {
					return runner.EmitIssue(
						r,
						fmt.Sprintf("{{ .AttributeName }} must be at least %d", r.min),
						attribute.Expr.Range(),
					)
				}
{{ end }}			}
{{ end }}		}
	}

	return nil
}
{{ if .Enum }}
func (r *{{ .RuleNameCC }}) validateEnum(runner tflint.Runner, val string, attribute *hclext.Attribute) error {
	for _, valid := range r.enum {
		if val == valid {
			return nil
		}
	}
	return runner.EmitIssue(
		r,
		fmt.Sprintf("{{ .AttributeName }} must be one of: %v", r.enum),
		attribute.Expr.Range(),
	)
}
{{ end }}
{{ if .Pattern }}
func (r *{{ .RuleNameCC }}) validatePattern(runner tflint.Runner, val string, attribute *hclext.Attribute) error {
	matched, err := regexp.MatchString(r.pattern, val)
	if err != nil {
		return err
	}
	if !matched {
		return runner.EmitIssue(
			r,
			fmt.Sprintf("{{ .AttributeName }} does not match required pattern: %s", r.pattern),
			attribute.Expr.Range(),
		)
	}
	return nil
}
{{ end }}
{{ if .Format }}
func (r *{{ .RuleNameCC }}) validateFormat(runner tflint.Runner, val string, attribute *hclext.Attribute) error {
	switch r.format {
	case "uuid":
		if _, err := uuid.Parse(val); err != nil {
			return runner.EmitIssue(
				r,
				"{{ .AttributeName }} must be a valid UUID",
				attribute.Expr.Range(),
			)
		}
	case "date-time":
		if _, err := time.Parse(time.RFC3339, val); err != nil {
			return runner.EmitIssue(
				r,
				"{{ .AttributeName }} must be a valid RFC3339 date-time",
				attribute.Expr.Range(),
			)
		}
	}
	return nil
}
{{ end }}
{{ if .Sensitive }}
func (r *{{ .RuleNameCC }}) isSensitive(attribute *hclext.Attribute) bool {
	return false
}
{{ end }}
